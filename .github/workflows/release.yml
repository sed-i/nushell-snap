name: Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    # Daily @ 10:00 UTC
    - cron:  '0 10 * * *'
  workflow_dispatch: {}
  push:
    branches:
      - main

jobs:
  release:
    name: Release
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
          - arm64
          - armhf
          - riscv64
          - s390x
    env:
      SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_STORE_LOGIN }}
      # https://forum.snapcraft.io/t/how-to-promote-snaps-from-edge-in-github-actions/36106/7
      SNAPCRAFT_HAS_TTY: "true"
    steps:
    - uses: actions/checkout@v4
    - uses: actions/checkout@v4
      with:
        repository: nushell/nushell
        path: nushell
        fetch-depth: 0
        fetch-tags: true
    - id: version
      name: Check versions
      run: |
        # Promote edge to beta if the version of edge is a semver,
        # i.e. maintainer tagged it with a semver.
        CURRENT=$(git -C nushell describe --tags --always)
        JSON=$(curl -s -H "Snap-Device-Series: 16" "https://api.snapcraft.io/v2/snaps/info/nushell?fields=version&architecture=${{ matrix.platform }}")
        EDGE=$(echo "$JSON" | jq -r '."channel-map"[] | select(.channel.track == "latest" and .channel.risk == "edge") | .version')
        BETA=$(echo "$JSON" | jq -r '."channel-map"[] | select(.channel.track == "latest" and .channel.risk == "beta") | .version')

        echo "current=$CURRENT" >> $GITHUB_OUTPUT
        echo "edge=$EDGE" >> $GITHUB_OUTPUT

        # We need to build from main only if the current version differs from the version in edge
        if [[ "$CURRENT" != "$EDGE" ]]; then
          echo "build=yes" >> $GITHUB_OUTPUT
        else
          echo "build=no" >> $GITHUB_OUTPUT
        fi

        # We need to promote from the new edge to beta only if the edge version is a semver
        # and the version in beta differs from the new version in edge
        if [[ "$CURRENT" =~ ^v?[0-9]+(\.[0-9]+){1,2}$ && "$CURRENT" != "$BETA" ]]; then
          echo "promote=yes" >> $GITHUB_OUTPUT
        else
          echo "promote=no" >> $GITHUB_OUTPUT
        fi

        # Debug info:
        echo "Current version: $CURRENT"
        echo "Edge version: $EDGE"
        echo "GITHUB_OUTPUT:"
        cat "$GITHUB_OUTPUT"

    - if: ${{ steps.version.outputs.build == 'yes' }}
      name: Build snap
      uses: snapcore/action-build@v1
      id: build
      env:
        CRAFT_BUILD_FOR: ${{ matrix.platform }}

    - if: ${{ steps.version.outputs.build == 'yes' && matrix.platform == 'amd64' }}
      name: Install snap (test)
      run: |
        sudo snap install --dangerous --classic ${{ steps.build.outputs.snap }}
        nushell.nu --version

    - if: ${{ steps.version.outputs.build == 'yes' }}
      name: Publish to edge
      uses: snapcore/action-publish@v1
      with:
        snap: ${{ steps.build.outputs.snap }}
        release: edge

    - if: ${{ steps.version.outputs.promote == 'yes' }}
      name: Promote from edge to beta
      run: |
        sudo snap install snapcraft --classic
        yes | snapcraft promote nushell --from-channel edge --to-channel beta

    - name: Beta check
      id: betaversion
      run: |
        LATEST_TAG=$(curl -s https://api.github.com/repos/nushell/nushell/releases | jq -r '.[].tag_name' | grep -E "^v?[0-9]+(\.[0-9]+){1,2}$" | sort -rV | head -1)
        JSON=$(curl -s -H "Snap-Device-Series: 16" "https://api.snapcraft.io/v2/snaps/info/nushell?fields=version&architecture=${{ matrix.platform }}")
        BETA=$(echo "$JSON" | jq -r '."channel-map"[] | select(.channel.track == "latest" and .channel.risk == "beta") | .version')
        echo "latest=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "beta=$BETA" >> $GITHUB_OUTPUT

        # We need to pack and release to beta only if the latest tag differs from what's in beta.
        # This could happen if the maintainer tagged with a semver and merged another commmit before
        # this snap ci had a chance to run.
        if [[ "$LATEST_TAG" != "$BETA" ]]; then
          echo "rebeta=yes" >> $GITHUB_OUTPUT
          sudo snap install yq
          LATEST_TAG=$LATEST_TAG yq -i ".parts.nushell.source-tag = env(LATEST_TAG)" snap/snapcraft.yaml
        else
          echo "rebeta=no" >> $GITHUB_OUTPUT
        fi

        # Debug info:
        echo "Latest tag: $LATEST_TAG"
        echo "GITHUB_OUTPUT:"
        cat "$GITHUB_OUTPUT"
        
    - if: ${{ steps.betaversion.outputs.rebeta == 'yes' }}
      name: Build from latest tag
      uses: snapcore/action-build@v1
      id: betabuild
      env:
        CRAFT_BUILD_FOR: ${{ matrix.platform }}

    - if: ${{ steps.betaversion.outputs.rebeta == 'yes' && matrix.platform == 'amd64' }}
      name: Install snap (test)
      run: |
        sudo snap install --dangerous --classic ${{ steps.betabuild.outputs.snap }}
        nushell.nu --version

    - if: ${{ steps.betaversion.outputs.rebeta == 'yes' }}
      name: Publish to beta
      uses: snapcore/action-publish@v1
      with:
        snap: ${{ steps.betabuild.outputs.snap }}
        release: beta
